/*
This problem is a programming version of Problem 12 from projecteuler.net

The sequence of triangle numbers is generated by adding the natural numbers. So the 7'th triangle number would be 1+2+3+4+5+6+7=28. The first ten terms would be:

1,3,6,10,15,21,28,36,45,55,...

Let us list the factors of the first seven triangle numbers:

1:1
3:1,3
6:1,2,3,6
10:1,2,5,10
15:1,3,5,15
21:1,3,7,21
28:1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over N divisors?

Input
First line T, the number of testcases. Each testcase consists of N in one line.

Output
For each testcase, print the required answer in one line.

Constraints
1≤T≤10
1≤N≤103

Sample input

4
1
2
3
4
Sample output

3
6
6
28
*/

package main

import "fmt"

type div_str struct {
	div   int
	count int
}

func divisorsCount(num int) int {
	div, end := 0, num
	for i := 1; i <= end; i++ {
		if (num % i) == 0 {
			if i != (num / i) {
				div += 2
			} else {
				div++
			}
			end = (num / (i * 2)) + (i / 2)
			//fmt.Println(i, num/i)
		}
	}
	return div
}

func main() {
	//Enter your code here. Read input from STDIN. Print output to STDOUT
	var t, n, divisors int
	d := div_str{1, 1}
	div_map := make([]div_str, 0)
	div_map = append(div_map, d)
	c := 1
	found := false
	fmt.Scanf("%d", &t)
	//t = 1
	for i := 0; i < t; i++ {
		fmt.Scanf("%d", &n)
		//n = 1000
		//fmt.Println("n = ", n)
		found = false
		for j := 0; j < c; j++ {
			if div_map[j].div > n {
				fmt.Println(div_map[j].count * (div_map[j].count + 1) / 2)
				found = true
				break
			}
		}
		for !found {
			divisors = 0
			d.count++
			if (d.count % 2) == 0 {
				divisors = divisorsCount(d.count/2) * divisorsCount(d.count+1)
			} else {
				divisors = divisorsCount(d.count) * divisorsCount((d.count+1)/2)
			}
			if divisors > d.div {
				d.div = divisors
				div_map = append(div_map, d)
				c++
			}
			if divisors > n {
				fmt.Println(d.count * (d.count + 1) / 2)
				found = true
				break
			}
		}
	}

}
